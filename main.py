"""Main module of telegram bot AboutMeSimpleBot."""
import os
import logging

from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    filters,
    MessageHandler,
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    ConversationHandler
)


# pylint: disable=unused-argument, consider-using-with
# mypy: disable-error-code="union-attr"

load_dotenv()

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
LOGLEVEL = getattr(logging, os.environ.get('LOGLEVEL', 'INFO'))
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

CHOOSING = 0

BOT_DESCRIPTION = (
    '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n'
    '–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å–æ –º–Ω–æ–π - –ì–µ–Ω–Ω–∞–¥–∏–µ–º –†–æ–º–∞–Ω–æ–≤—ã–º (t.me/Gena40).\n'
    '–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ —è —Å–µ–π—á–∞—Å –≤—ã–≥–ª—è–∂—É (/my_selfie), '
    '–∫–∞–∫ —è –≤—ã–≥–ª—è–¥–µ–ª –≤ —Å—Ç–∞—Ä—à–µ–π —à–∫–æ–ª–µ (/me_at_school), '
    '–ø–æ—á–∏—Ç–∞—Ç—å –ø—Ä–æ –º–æ—ë –ª—é–±–∏–º–æ–µ —É–≤–ª–µ—á–µ–Ω–∏–µ (/hobby), –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–∏–º –∫–æ–¥–æ–º '
    '–Ω–∞ –ø—Ä–∏–º–µ—Ä–µ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ (/sorce_code) –∏ –ø—Ä–æ—Å–ª—É—à–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ '
    '–≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–æ—ë–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ (/my_voice).\n'
    '–î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ –º–µ–Ω—é. –î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!'
)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=LOGLEVEL
)

logger = logging.getLogger(__name__)

reply_keyboard = [
    ["—á—Ç–æ —Ç–∞–∫–æ–µ GPT", "—Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É SQL –∏ NoSQL", "–∏—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–≤–æ–π ‚ù§Ô∏è"],
    ["–í—ã–π—Ç–∏ –∏–∑ —ç—Ç–æ–≥–æ –º–µ–Ω—é"]
]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)


def check_token() -> bool:
    """
    Checks for the necessary environment variables.
    """
    return all([TELEGRAM_TOKEN])


async def my_voice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    Start of a dialog with a voice message choice.
    """
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É, –ø—Ä–æ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–ª—É—à–∞—Ç—å",
        reply_markup=markup
    )
    return CHOOSING


async def selfie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Sends my selfie photo to the bot.
    """
    logger.info('requested selfie')
    await context.bot.send_photo(
        chat_id=update.effective_chat.id,
        photo=open(f'{BASE_DIR}/data/selfie.jpg', 'rb')
    )


async def school_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Sends my school photo to the bot.
    """
    logger.info('requested school_photo')
    await context.bot.send_photo(
        chat_id=update.effective_chat.id,
        photo=open(f'{BASE_DIR}/data/school_photo.jpg', 'rb')
    )


async def source_repo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Send link to the repository with code of this bot.
    """
    logger.info('requested source_repo')
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text='https://github.com/Gena40/about_me_tgbot'
    )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Sends text with description of the bot's functionality.
    """
    logger.info('Get command %s, send bot description', update.message.text)
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=BOT_DESCRIPTION
    )


async def hobby(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Sends text to the bot with description of my hobby.
    """
    logger.info('requested info about hobby')
    text = (
        '–ì–ª–∞–≤–Ω–æ–µ –º–æ—ë —É–≤–ª–µ—á–µ–Ω–∏–µ - –ø—Ä–∏–±–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫.\n'
        '–≠—Ç–æ –∫–æ–≥–¥–∞ —Ç—ã —Ö–æ–¥–∏—à—å —Å –ª–æ–ø–∞—Ç–æ–π –∏ –º–µ—Ç–∞–ª–ª–æ–∏—Å–∫–∞—Ç–µ–ª–µ–º –ø–æ –º–µ—Å—Ç–∞–º '
        '—Å—Ç–∞—Ä–∏–Ω–Ω—ã—Ö –ø–æ—Å–µ–ª–µ–Ω–∏–π –∏ –∏—â–µ—à—å –∫–ª–∞–¥ ‚õè\n '
        '–ö–æ–Ω–µ—á–Ω–æ, –Ω–∞–π—Ç–∏ –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–ª–∞–¥ - —ç—Ç–æ –±–æ–ª—å—à–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å –∏ –≤—Å–µ—Ä—å–µ–∑ '
        '—Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –Ω–∞ —ç—Ç–æ –Ω–µ —Å—Ç–æ–∏—Ç ‚úñÔ∏èüí∞\n'
        '–û–¥–Ω–∞–∫–æ, –≤–æ –≤—Å–µ –≤—Ä–µ–º–µ–Ω–∞ –ª—é–¥–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å —Ç–µ—Ä—è–ª–∏ü™ôüíç\n '
        '–ù–∞–ø—Ä–∏–º–µ—Ä –º–æ–Ω–µ—Ç–∫–∏, –∫—Ä–µ—Å—Ç–∏–∫–∏ –∏ –∫–æ–ª—å—Ü–∞ –ø–æ–ø–∞–¥–∞—é—Ç—Å—è —á–∞—â–µ –≤—Å–µ–≥–æ. '
        '–ù–æ —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ç–∞–∫—É—é "–ø–æ—Ç–µ—Ä—è—à–∫—É", —Ç–æ–∂–µ –Ω–∞–¥–æ –ø–æ—Å—Ç–∞—Ä–∞—Ç—å—Å—è. '
        '–ë—ã–≤–∞–µ—Ç –∑–∞ —Ü–µ–ª—ã–π –¥–µ–Ω—å –ø–æ–∏—Å–∫–æ–≤ –Ω–µ –Ω–∞—Ö–æ–¥–∏—à—å –≤–æ–æ–±—â–µ –Ω–∏—á–µ–≥–æ –ø–æ–¥–æ–±–Ω–æ–≥–æ. '
        '–ê –≤–æ—Ç –±—É—Ç—ã–ª–æ—á–Ω—ã–µ –∫—Ä—ã—à–∫–∏ - –¥—Ä—É–≥–æ–µ –¥–µ–ª–æ, –±–µ–∑ –Ω–∏—Ö –Ω–∏ –æ–¥–∏–Ω –≤—ã–µ–∑–¥ –Ω–µ –æ–±—Ö–æ–¥–∏—Ç—Å—è üòÖ\n'
        '–°–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –≤ —Ç–∞–∫–æ–º —É–≤–ª–µ—á–µ–Ω–∏–∏ –¥–ª—è –º–µ–Ω—è - —ç—Ç–æ —Å–∞–º –ø—Ä–æ—Ü–µ—Å—Å, '
        '–ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∏–∫–æ–≥–¥–∞ –∑–∞—Ä–∞–Ω–µ–µ –Ω–µ –∑–Ω–∞–µ—à—å —á—Ç–æ —Ç—ã —Å–µ–π—á–∞—Å –≤—ã–∫–æ–ø–∞–µ—à—å. '
        '–ò–Ω–æ–≥–¥–∞ –ø–æ–ø–∞–¥–∞—é—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏ —Å—Ç–∞—Ä–∏–Ω–Ω—ã–µ –≤–µ—â–∏ üëëüéñ‚ö±Ô∏è '
        '–ò –≤ –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ –∏–∑ –ª–æ–º—Ç—è —Å—ã—Ä–æ–π –∑–µ–º–ª–∏ —Ç–µ–±–µ –≤ –ª–∞–¥–æ–Ω—å –≤—ã–ø–∞–¥–∞–µ—Ç –∫—É—Å–æ—á–µ–∫ –¥–∞–ª–µ–∫–æ–π —ç–ø–æ—Ö–∏, '
        '–∏—Å–ø—ã—Ç—ã–≤–∞–µ—à—å –ø—Ä–æ—Å—Ç–æ –Ω–µ–ø–æ–≤—Ç–æ—Ä–∏–º—ã–µ —ç–º–æ—Ü–∏–∏, '
        '–∫–æ—Ç–æ—Ä—ã–µ –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ —Å—Ç–æ—è—Ç –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö —Å–∏–ª –∏ –≤—Ä–µ–º–µ–Ω–∏.'
    )
    await context.bot.send_photo(
        chat_id=update.effective_chat.id,
        photo=open(f'{BASE_DIR}/data/old_coin.jpg', 'rb'),
        caption=text
    )


async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Handler function for an unknown command.
    """
    text = update.message.text
    if text == '/my_voice':
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ."
        )
    else:
        logger.info('requested unknow command: %s', text)
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É."
        )


async def voice_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Function - handler for choosing a voice message to listen."""
    text = update.message.text
    logger.info('requested voice: %s', text)
    if text == "—á—Ç–æ —Ç–∞–∫–æ–µ GPT":
        await update.message.reply_voice(
            voice=open(f'{BASE_DIR}/data/audio_gpt.ogg', 'rb'),
            caption='–ø—Ä–æ GPT',
            reply_markup=markup
        )
    elif text == "—Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É SQL –∏ NoSQL":
        await update.message.reply_voice(
            voice=open(f'{BASE_DIR}/data/audio_sql.ogg', 'rb'),
            caption='–ø—Ä–æ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É SQL –∏ NoSQL',
            reply_markup=markup
        )
    elif text == "–∏—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–≤–æ–π ‚ù§Ô∏è":
        await update.message.reply_voice(
            voice=open(f'{BASE_DIR}/data/audio_love.ogg', 'rb'),
            caption='–ø—Ä–æ –ø–µ—Ä–≤—É—é –ª—é–±–æ–≤—å',
            reply_markup=markup
        )
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")


async def exit_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    Exit the voice message chooser menu.
    """
    logger.info('received command to close audio selection menu')
    await update.message.reply_text(
        "–û–∂–∏–¥–∞—é —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã...",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


def main() -> None:
    """
    The main logic of the bot.
    """
    if not check_token():
        message = (
            'The required environment variable is missing!'
            'The program is forced to stop.'
        )
        logging.critical(message)
        return

    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()  # type: ignore

    start_handler = CommandHandler('start', start)
    application.add_handler(start_handler)

    help_handler = CommandHandler('help', start)
    application.add_handler(help_handler)

    hobby_handler = CommandHandler('hobby', hobby)
    application.add_handler(hobby_handler)

    selfie_handler = CommandHandler('my_selfie', selfie)
    application.add_handler(selfie_handler)

    school_photo_handler = CommandHandler('me_at_school', school_photo)
    application.add_handler(school_photo_handler)

    source_repo_handler = CommandHandler('source_repo', source_repo)
    application.add_handler(source_repo_handler)

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("my_voice", my_voice)],
        states={
            CHOOSING: [
                MessageHandler(
                    filters.Regex(
                        "^(—á—Ç–æ —Ç–∞–∫–æ–µ GPT|—Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É SQL –∏ NoSQL|–∏—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–≤–æ–π ‚ù§Ô∏è)$"
                    ),
                    voice_choice
                ),
                MessageHandler(filters.Regex("^–í—ã–π—Ç–∏ –∏–∑ —ç—Ç–æ–≥–æ –º–µ–Ω—é$"), exit_menu),
            ]
        },
        fallbacks=[MessageHandler(filters.Regex("^–í—ã–π—Ç–∏ –∏–∑ —ç—Ç–æ–≥–æ –º–µ–Ω—é$"), exit_menu)]
    )

    application.add_handler(conv_handler)

    unknown_handler = MessageHandler(filters.COMMAND, unknown)
    application.add_handler(unknown_handler)

    application.run_polling()


if __name__ == '__main__':
    main()
